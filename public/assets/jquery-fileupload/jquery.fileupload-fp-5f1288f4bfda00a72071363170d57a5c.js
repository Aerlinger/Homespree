/*
 * jQuery File Upload File Processing Plugin 1.2.1
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2012, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */
!function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery","load-image","canvas-to-blob","./jquery.fileupload"],t):t(window.jQuery,window.loadImage)}(function(t,e){"use strict";t.widget("blueimp.fileupload",t.blueimp.fileupload,{options:{process:[],add:function(e,i){t(this).fileupload("process",i).done(function(){i.submit()})}},processActions:{load:function(i,n){var s=this,o=i.files[i.index],a=t.Deferred();return window.HTMLCanvasElement&&window.HTMLCanvasElement.prototype.toBlob&&("number"!==t.type(n.maxFileSize)||o.size<n.maxFileSize)&&(!n.fileTypes||n.fileTypes.test(o.type))?e(o,function(t){return t.src?(i.img=t,a.resolveWith(s,[i]),void 0):a.rejectWith(s,[i])}):a.rejectWith(s,[i]),a.promise()},resize:function(i,n){var s,o=i.img;return n=t.extend({canvas:!0},n),o&&(s=e.scale(o,n),(s.width!==o.width||s.height!==o.height)&&(i.canvas=s)),i},save:function(e){if(!e.canvas)return e;var i=this,n=e.files[e.index],s=n.name,o=t.Deferred(),a=function(t){t.name||(n.type===t.type?t.name=n.name:n.name&&(t.name=n.name.replace(/\..+$/,"."+t.type.substr(6)))),e.files[e.index]=t,o.resolveWith(i,[e])};return e.canvas.mozGetAsFile?a(e.canvas.mozGetAsFile(/^image\/(jpeg|png)$/.test(n.type)&&s||(s&&s.replace(/\..+$/,"")||"blob")+".png",n.type)):e.canvas.toBlob(a,n.type),o.promise()}},_processFile:function(e,i,n){var s=this,o=t.Deferred().resolveWith(s,[{files:e,index:i}]),a=o.promise();return s._processing+=1,t.each(n.process,function(t,e){a=a.pipe(function(t){return s.processActions[e.action].call(this,t,e)})}),a.always(function(){s._processing-=1,0===s._processing&&s.element.removeClass("fileupload-processing")}),1===s._processing&&s.element.addClass("fileupload-processing"),a},process:function(e){var i=this,n=t.extend({},this.options,e);return n.process&&n.process.length&&this._isXHRUpload(n)&&t.each(e.files,function(s){i._processingQueue=i._processingQueue.pipe(function(){var o=t.Deferred();return i._processFile(e.files,s,n).always(function(){o.resolveWith(i)}),o.promise()})}),this._processingQueue},_create:function(){this._super(),this._processing=0,this._processingQueue=t.Deferred().resolveWith(this).promise()}})});